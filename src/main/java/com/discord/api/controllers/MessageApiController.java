/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.discord.api.controllers;

import javax.security.auth.login.LoginException;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.discord.model.Message;
import com.discord.model.ModelApiResponse;
import com.discord.services.BotService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
@Api(value = "Message", tags = "Message", description = "The message API")
@RequestMapping(path = "/api/v1", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
public class MessageApiController {

    private BotService botService;

    @Autowired
    MessageApiController(BotService botService) {
        this.botService = botService;
    }

    @PostMapping(path = "message/send", consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiOperation(value = "Send message to a discord channel", nickname = "sendMessage", response = ModelApiResponse.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Mensagem adicionada com sucesso", response = ModelApiResponse.class),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 405, message = "Invalid input") })
    ResponseEntity<ModelApiResponse> sendMessage(@ApiParam(value = "É necessário que o campo mensagem esteja preenchido" ,required=true )  @Valid @RequestBody Message body) {
        ResponseEntity<ModelApiResponse> response = null;
        try {
            boolean isSuccess = this.botService.sendMessage(body.getChannelName(), body.getMessage());
            ModelApiResponse model = new ModelApiResponse();
            if (isSuccess) {
                model.setCode(200);
                model.setMessage("Mensagem enviada com sucesso!");
                response = new ResponseEntity<>(model, HttpStatus.OK);
            } else {
                model.setCode(502);
                model.setMessage("Erro ao tentar enviar mensagem!");
                response = new ResponseEntity<>(model, HttpStatus.BAD_GATEWAY);
            }
            
        } catch (LoginException | InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return response;
    }

}
